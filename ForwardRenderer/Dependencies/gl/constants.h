#pragma once
#include "../opengl.h"
#include <array>
#include <algorithm>

namespace gl
{
	enum class GetParam
	{
		ACTIVE_TEXTURE = GL_ACTIVE_TEXTURE,
		ALIASED_LINE_WIDTH_RANGE = GL_ALIASED_LINE_WIDTH_RANGE,
		//ALIASED_POINT_SIZE_RANGE = GL_ALIASED_POINT_SIZE_RANGE,
		//ALPHA_BITS = GL_ALPHA_BITS,
		ARRAY_BUFFER_BINDING = GL_ARRAY_BUFFER_BINDING,
		BLEND = GL_BLEND,
		//BLEND_COLOR = GL_BLEND_COLOR,
		BLEND_DST_ALPHA = GL_BLEND_DST_ALPHA,
		BLEND_DST_RGB = GL_BLEND_DST_RGB,
		BLEND_EQUATION_ALPHA = GL_BLEND_EQUATION_ALPHA,
		BLEND_EQUATION_RGB = GL_BLEND_EQUATION_RGB,
		BLEND_SRC_ALPHA = GL_BLEND_SRC_ALPHA,
		BLEND_SRC_RGB = GL_BLEND_SRC_RGB,
		//GL_BLUE_BITS = GL_BLUE_BITS,
		COLOR_CLEAR_VALUE = GL_COLOR_CLEAR_VALUE,
		COLOR_WRITEMASK = GL_COLOR_WRITEMASK,
		COMPRESSED_TEXTURE_FORMATS = GL_COMPRESSED_TEXTURE_FORMATS,
		COPY_READ_BUFFER_BINDING = GL_COPY_READ_BUFFER_BINDING,
		COPY_WRITE_BUFFER_BINDING = GL_COPY_WRITE_BUFFER_BINDING,
		CULL_FACE = GL_CULL_FACE,
		CULL_FACE_MODE = GL_CULL_FACE_MODE,
		CURRENT_PROGRAM = GL_CURRENT_PROGRAM,
		//GL_DEPTH_BITS = GL_DEPTH_BITS,
		DEPTH_CLEAR_VALUE = GL_DEPTH_CLEAR_VALUE,
		DEPTH_FUNC = GL_DEPTH_FUNC,
		DEPTH_RANGE = GL_DEPTH_RANGE,
		DEPTH_TEST = GL_DEPTH_TEST,
		DEPTH_WRITEMASK = GL_DEPTH_WRITEMASK,
		DITHER = GL_DITHER,
		DRAW_BUFFER0 = GL_DRAW_BUFFER0,
		DRAW_BUFFER1 = GL_DRAW_BUFFER1,
		DRAW_BUFFER2 = GL_DRAW_BUFFER2,
		DRAW_BUFFER3 = GL_DRAW_BUFFER3,
		DRAW_BUFFER4 = GL_DRAW_BUFFER4,
		DRAW_BUFFER5 = GL_DRAW_BUFFER5,
		DRAW_BUFFER6 = GL_DRAW_BUFFER6,
		DRAW_BUFFER7 = GL_DRAW_BUFFER7,
		DRAW_BUFFER8 = GL_DRAW_BUFFER8,
		DRAW_BUFFER9 = GL_DRAW_BUFFER9,
		DRAW_BUFFER10 = GL_DRAW_BUFFER10,
		DRAW_BUFFER11 = GL_DRAW_BUFFER11,
		DRAW_BUFFER12 = GL_DRAW_BUFFER12,
		DRAW_BUFFER13 = GL_DRAW_BUFFER13,
		DRAW_BUFFER14 = GL_DRAW_BUFFER14,
		DRAW_BUFFER15 = GL_DRAW_BUFFER15,
		DRAW_FRAMEBUFFER_BINDING = GL_DRAW_FRAMEBUFFER_BINDING,
		ELEMENT_ARRAY_BUFFER_BINDING = GL_ELEMENT_ARRAY_BUFFER_BINDING,
		FRAGMENT_SHADER_DERIVATIVE_HINT = GL_FRAGMENT_SHADER_DERIVATIVE_HINT,
		FRONT_FACE = GL_FRONT_FACE,
		//GL_GENERATE_MIPMAP_HINT = GL_GENERATE_MIPMAP_HINT,
		//GL_GREEN_BITS = GL_GREEN_BITS,
		IMPLEMENTATION_COLOR_READ_FORMAT = GL_IMPLEMENTATION_COLOR_READ_FORMAT,
		IMPLEMENTATION_COLOR_READ_TYPE = GL_IMPLEMENTATION_COLOR_READ_TYPE,
		LINE_WIDTH = GL_LINE_WIDTH,
		MAJOR_VERSION = GL_MAJOR_VERSION,
		MAX_3D_TEXTURE_SIZE = GL_MAX_3D_TEXTURE_SIZE,
		MAX_ARRAY_TEXTURE_LAYERS = GL_MAX_ARRAY_TEXTURE_LAYERS,
		MAX_COLOR_ATTACHMENTS = GL_MAX_COLOR_ATTACHMENTS,
		MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS,
		MAX_COMBINED_TEXTURE_IMAGE_UNITS = GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS,
		MAX_COMBINED_UNIFORM_BLOCKS = GL_MAX_COMBINED_UNIFORM_BLOCKS,
		MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS,
		MAX_CUBE_MAP_TEXTURE_SIZE = GL_MAX_CUBE_MAP_TEXTURE_SIZE,
		MAX_DRAW_BUFFERS = GL_MAX_DRAW_BUFFERS,
		MAX_ELEMENT_INDEX = GL_MAX_ELEMENT_INDEX,
		MAX_ELEMENTS_INDICES = GL_MAX_ELEMENTS_INDICES,
		MAX_ELEMENTS_VERTICES = GL_MAX_ELEMENTS_VERTICES,
		MAX_FRAGMENT_INPUT_COMPONENTS = GL_MAX_FRAGMENT_INPUT_COMPONENTS,
		MAX_FRAGMENT_UNIFORM_BLOCKS = GL_MAX_FRAGMENT_UNIFORM_BLOCKS,
		MAX_FRAGMENT_UNIFORM_COMPONENTS = GL_MAX_FRAGMENT_UNIFORM_COMPONENTS,
		MAX_FRAGMENT_UNIFORM_VECTORS = GL_MAX_FRAGMENT_UNIFORM_VECTORS,
		MAX_PROGRAM_TEXEL_OFFSET = GL_MAX_PROGRAM_TEXEL_OFFSET,
		MAX_RENDERBUFFER_SIZE = GL_MAX_RENDERBUFFER_SIZE,
		MAX_SAMPLES = GL_MAX_SAMPLES,
		MAX_SERVER_WAIT_TIMEOUT = GL_MAX_SERVER_WAIT_TIMEOUT,
		MAX_TEXTURE_IMAGE_UNITS = GL_MAX_TEXTURE_IMAGE_UNITS,
		MAX_TEXTURE_LOD_BIAS = GL_MAX_TEXTURE_LOD_BIAS,
		MAX_TEXTURE_SIZE = GL_MAX_TEXTURE_SIZE,
		MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS,
		MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS,
		MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS,
		MAX_UNIFORM_BLOCK_SIZE = GL_MAX_UNIFORM_BLOCK_SIZE,
		MAX_UNIFORM_BUFFER_BINDINGS = GL_MAX_UNIFORM_BUFFER_BINDINGS,
		MAX_VARYING_COMPONENTS = GL_MAX_VARYING_COMPONENTS,
		MAX_VARYING_VECTORS = GL_MAX_VARYING_VECTORS,
		MAX_VERTEX_ATTRIBS = GL_MAX_VERTEX_ATTRIBS,
		MAX_VERTEX_TEXTURE_IMAGE_UNITS = GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS,
		MAX_VERTEX_OUTPUT_COMPONENTS = GL_MAX_VERTEX_OUTPUT_COMPONENTS,
		MAX_VERTEX_UNIFORM_BLOCKS = GL_MAX_VERTEX_UNIFORM_BLOCKS,
		MAX_VERTEX_UNIFORM_COMPONENTS = GL_MAX_VERTEX_UNIFORM_COMPONENTS,
		MAX_VERTEX_UNIFORM_VECTORS = GL_MAX_VERTEX_UNIFORM_VECTORS,
		MAX_VIEWPORT_DIMS = GL_MAX_VIEWPORT_DIMS,
		MIN_PROGRAM_TEXEL_OFFSET = GL_MIN_PROGRAM_TEXEL_OFFSET,
		MINOR_VERSION = GL_MINOR_VERSION,
		NUM_COMPRESSED_TEXTURE_FORMATS = GL_NUM_COMPRESSED_TEXTURE_FORMATS,
		NUM_EXTENSIONS = GL_NUM_EXTENSIONS,
		NUM_PROGRAM_BINARY_FORMATS = GL_NUM_PROGRAM_BINARY_FORMATS,
		NUM_SHADER_BINARY_FORMATS = GL_NUM_SHADER_BINARY_FORMATS,
		PACK_ALIGNMENT = GL_PACK_ALIGNMENT,
		PACK_ROW_LENGTH = GL_PACK_ROW_LENGTH,
		PACK_SKIP_PIXELS = GL_PACK_SKIP_PIXELS,
		PACK_SKIP_ROWS = GL_PACK_SKIP_ROWS,
		PIXEL_PACK_BUFFER_BINDING = GL_PIXEL_PACK_BUFFER_BINDING,
		POLYGON_OFFSET_FACTOR = GL_POLYGON_OFFSET_FACTOR,
		POLYGON_OFFSET_FILL = GL_POLYGON_OFFSET_FILL,
		POLYGON_OFFSET_UNITS = GL_POLYGON_OFFSET_UNITS,
		PRIMITIVE_RESTART_FIXED_INDEX = GL_PRIMITIVE_RESTART_FIXED_INDEX,
		PROGRAM_BINARY_FORMATS = GL_PROGRAM_BINARY_FORMATS,
		RASTERIZER_DISCARD = GL_RASTERIZER_DISCARD,
		READ_BUFFER = GL_READ_BUFFER,
		READ_FRAMEBUFFER_BINDING = GL_READ_FRAMEBUFFER_BINDING,
		//	GL_RED_BITS = GL_RED_BITS,
		RENDERBUFFER_BINDING = GL_RENDERBUFFER_BINDING,
		SAMPLE_ALPHA_TO_COVERAGE = GL_SAMPLE_ALPHA_TO_COVERAGE,
		SAMPLE_BUFFERS = GL_SAMPLE_BUFFERS,
		SAMPLE_COVERAGE = GL_SAMPLE_COVERAGE,
		SAMPLE_COVERAGE_INVERT = GL_SAMPLE_COVERAGE_INVERT,
		SAMPLE_COVERAGE_VALUE = GL_SAMPLE_COVERAGE_VALUE,
		SAMPLER_BINDING = GL_SAMPLER_BINDING,
		SAMPLES = GL_SAMPLES,
		SCISSOR_BOX = GL_SCISSOR_BOX,
		SCISSOR_TEST = GL_SCISSOR_TEST,
		SHADER_BINARY_FORMATS = GL_SHADER_BINARY_FORMATS,
		SHADER_COMPILER = GL_SHADER_COMPILER,
		STENCIL_BACK_FAIL = GL_STENCIL_BACK_FAIL,
		STENCIL_BACK_FUNC = GL_STENCIL_BACK_FUNC,
		STENCIL_BACK_PASS_DEPTH_FAIL = GL_STENCIL_BACK_PASS_DEPTH_FAIL,
		STENCIL_BACK_PASS_DEPTH_PASS = GL_STENCIL_BACK_PASS_DEPTH_PASS,
		STENCIL_BACK_REF = GL_STENCIL_BACK_REF,
		STENCIL_BACK_VALUE_MASK = GL_STENCIL_BACK_VALUE_MASK,
		STENCIL_BACK_WRITEMASK = GL_STENCIL_BACK_WRITEMASK,
		//	GL_STENCIL_BITS = GL_STENCIL_BITS,
		STENCIL_CLEAR_VALUE = GL_STENCIL_CLEAR_VALUE,
		STENCIL_FAIL = GL_STENCIL_FAIL,
		STENCIL_FUNC = GL_STENCIL_FUNC,
		STENCIL_PASS_DEPTH_FAIL = GL_STENCIL_PASS_DEPTH_FAIL,
		STENCIL_PASS_DEPTH_PASS = GL_STENCIL_PASS_DEPTH_PASS,
		STENCIL_REF = GL_STENCIL_REF,
		STENCIL_TEST = GL_STENCIL_TEST,
		STENCIL_VALUE_MASK = GL_STENCIL_VALUE_MASK,
		STENCIL_WRITEMASK = GL_STENCIL_WRITEMASK,
		SUBPIXEL_BITS = GL_SUBPIXEL_BITS,
		TEXTURE_BINDING_2D = GL_TEXTURE_BINDING_2D,
		TEXTURE_BINDING_2D_ARRAY = GL_TEXTURE_BINDING_2D_ARRAY,
		TEXTURE_BINDING_3D = GL_TEXTURE_BINDING_3D,
		TEXTURE_BINDING_CUBE_MAP = GL_TEXTURE_BINDING_CUBE_MAP,
		TRANSFORM_FEEDBACK_BINDING = GL_TRANSFORM_FEEDBACK_BINDING,
		TRANSFORM_FEEDBACK_ACTIVE = GL_TRANSFORM_FEEDBACK_ACTIVE,
		TRANSFORM_FEEDBACK_BUFFER_BINDING = GL_TRANSFORM_FEEDBACK_BUFFER_BINDING,
		TRANSFORM_FEEDBACK_PAUSED = GL_TRANSFORM_FEEDBACK_PAUSED,
		TRANSFORM_FEEDBACK_BUFFER_START = GL_TRANSFORM_FEEDBACK_BUFFER_START,
		UNIFORM_BUFFER_BINDING = GL_UNIFORM_BUFFER_BINDING,
		UNIFORM_BUFFER_OFFSET_ALIGNMENT = GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT,
		UNIFORM_BUFFER_SIZE = GL_UNIFORM_BUFFER_SIZE,
		UNIFORM_BUFFER_START = GL_UNIFORM_BUFFER_START,
		UNPACK_ALIGNMENT = GL_UNPACK_ALIGNMENT,
		UNPACK_IMAGE_HEIGHT = GL_UNPACK_IMAGE_HEIGHT,
		UNPACK_ROW_LENGTH = GL_UNPACK_ROW_LENGTH,
		UNPACK_SKIP_IMAGES = GL_UNPACK_SKIP_IMAGES,
		UNPACK_SKIP_PIXELS = GL_UNPACK_SKIP_PIXELS,
		UNPACK_SKIP_ROWS = GL_UNPACK_SKIP_ROWS,
		VERTEX_ARRAY_BINDING = GL_VERTEX_ARRAY_BINDING,
		VIEWPORT = GL_VIEWPORT,
	};

	template<GetParam T>
	struct get
	{};

	template<> struct get<GetParam::ACTIVE_TEXTURE> {
			static GLint value() {
				GLint res;															
				glGetIntegerv(static_cast<GLenum>(GetParam::ACTIVE_TEXTURE), &res);
				return res - GL_TEXTURE0;															
		}
	};

#define __gl_get_integer(Enum) template<> struct get<Enum>{ \
		static GLint value() {													\
			GLint res;															\
			glGetIntegerv(static_cast<GLenum>(Enum), &res);	\
			return res;															\
		}}

	__gl_get_integer(GetParam::ARRAY_BUFFER_BINDING);
	__gl_get_integer(GetParam::COPY_READ_BUFFER_BINDING);
	__gl_get_integer(GetParam::COPY_WRITE_BUFFER_BINDING);
	__gl_get_integer(GetParam::CURRENT_PROGRAM);
	__gl_get_integer(GetParam::DRAW_FRAMEBUFFER_BINDING);
	__gl_get_integer(GetParam::ELEMENT_ARRAY_BUFFER_BINDING);
	__gl_get_integer(GetParam::MAJOR_VERSION);
	__gl_get_integer(GetParam::MINOR_VERSION);
	__gl_get_integer(GetParam::MAX_3D_TEXTURE_SIZE);
	__gl_get_integer(GetParam::MAX_ARRAY_TEXTURE_LAYERS);
	__gl_get_integer(GetParam::MAX_COLOR_ATTACHMENTS);
	__gl_get_integer(GetParam::MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS);
	__gl_get_integer(GetParam::MAX_COMBINED_TEXTURE_IMAGE_UNITS);
	__gl_get_integer(GetParam::MAX_COMBINED_UNIFORM_BLOCKS);
	__gl_get_integer(GetParam::MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS);
	__gl_get_integer(GetParam::MAX_CUBE_MAP_TEXTURE_SIZE);
	__gl_get_integer(GetParam::MAX_DRAW_BUFFERS);
	__gl_get_integer(GetParam::MAX_ELEMENTS_INDICES);
	__gl_get_integer(GetParam::MAX_ELEMENT_INDEX);
	__gl_get_integer(GetParam::MAX_ELEMENTS_VERTICES);
	__gl_get_integer(GetParam::MAX_FRAGMENT_INPUT_COMPONENTS);
	__gl_get_integer(GetParam::MAX_FRAGMENT_UNIFORM_BLOCKS);
	__gl_get_integer(GetParam::MAX_FRAGMENT_UNIFORM_COMPONENTS);
	__gl_get_integer(GetParam::MAX_FRAGMENT_UNIFORM_VECTORS);
	__gl_get_integer(GetParam::MAX_PROGRAM_TEXEL_OFFSET);
	__gl_get_integer(GetParam::MAX_RENDERBUFFER_SIZE);
	__gl_get_integer(GetParam::MAX_SAMPLES);
	__gl_get_integer(GetParam::MAX_SERVER_WAIT_TIMEOUT);
	__gl_get_integer(GetParam::MAX_TEXTURE_IMAGE_UNITS);
	__gl_get_integer(GetParam::MAX_TEXTURE_LOD_BIAS);
	__gl_get_integer(GetParam::MAX_TEXTURE_SIZE);
	__gl_get_integer(GetParam::MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS);
	__gl_get_integer(GetParam::MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS);
	__gl_get_integer(GetParam::MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS);
	__gl_get_integer(GetParam::MAX_UNIFORM_BLOCK_SIZE);
	__gl_get_integer(GetParam::MAX_UNIFORM_BUFFER_BINDINGS);
	__gl_get_integer(GetParam::MAX_VARYING_COMPONENTS);
	__gl_get_integer(GetParam::MAX_VARYING_VECTORS);
	__gl_get_integer(GetParam::MAX_VERTEX_ATTRIBS);
	__gl_get_integer(GetParam::MAX_VERTEX_TEXTURE_IMAGE_UNITS);
	__gl_get_integer(GetParam::MAX_VERTEX_OUTPUT_COMPONENTS);
	__gl_get_integer(GetParam::MAX_VERTEX_UNIFORM_BLOCKS);
	__gl_get_integer(GetParam::MAX_VERTEX_UNIFORM_COMPONENTS);
	__gl_get_integer(GetParam::MAX_VERTEX_UNIFORM_VECTORS);
	__gl_get_integer(GetParam::MAX_VIEWPORT_DIMS);
	__gl_get_integer(GetParam::MIN_PROGRAM_TEXEL_OFFSET);
	__gl_get_integer(GetParam::NUM_COMPRESSED_TEXTURE_FORMATS);
	__gl_get_integer(GetParam::NUM_EXTENSIONS);
	__gl_get_integer(GetParam::NUM_PROGRAM_BINARY_FORMATS);
	__gl_get_integer(GetParam::NUM_SHADER_BINARY_FORMATS);
	__gl_get_integer(GetParam::UNIFORM_BUFFER_OFFSET_ALIGNMENT);
	
	// TODO make enum
	__gl_get_integer(GetParam::BLEND_DST_ALPHA);
	__gl_get_integer(GetParam::BLEND_DST_RGB);
	__gl_get_integer(GetParam::BLEND_EQUATION_ALPHA);
	__gl_get_integer(GetParam::BLEND_EQUATION_RGB);
	__gl_get_integer(GetParam::BLEND_SRC_ALPHA);
	__gl_get_integer(GetParam::BLEND_SRC_RGB);
	__gl_get_integer(GetParam::CULL_FACE_MODE);
	__gl_get_integer(GetParam::DEPTH_FUNC);
	__gl_get_integer(GetParam::DRAW_BUFFER0);
	__gl_get_integer(GetParam::DRAW_BUFFER1);
	__gl_get_integer(GetParam::DRAW_BUFFER2);
	__gl_get_integer(GetParam::DRAW_BUFFER3);
	__gl_get_integer(GetParam::DRAW_BUFFER4);
	__gl_get_integer(GetParam::DRAW_BUFFER5);
	__gl_get_integer(GetParam::DRAW_BUFFER6);
	__gl_get_integer(GetParam::DRAW_BUFFER7);
	__gl_get_integer(GetParam::DRAW_BUFFER8);
	__gl_get_integer(GetParam::DRAW_BUFFER9);
	__gl_get_integer(GetParam::DRAW_BUFFER10);
	__gl_get_integer(GetParam::DRAW_BUFFER11);
	__gl_get_integer(GetParam::DRAW_BUFFER12);
	__gl_get_integer(GetParam::DRAW_BUFFER13);
	__gl_get_integer(GetParam::DRAW_BUFFER14);
	__gl_get_integer(GetParam::DRAW_BUFFER15);
	__gl_get_integer(GetParam::FRAGMENT_SHADER_DERIVATIVE_HINT);
	__gl_get_integer(GetParam::FRONT_FACE);
	__gl_get_integer(GetParam::IMPLEMENTATION_COLOR_READ_FORMAT);
	__gl_get_integer(GetParam::IMPLEMENTATION_COLOR_READ_TYPE);

#undef __gl_get_integer

#define __gl_get_integer_array(Enum, size) template<> struct get<Enum>{ \
		static std::array<GLint, size> value() {													\
			std::array<GLint, size> res;															\
			glGetIntegerv(static_cast<GLenum>(Enum), res.data());	\
			return res;															\
		}}

	

#undef __gl_get_integer_array

#define __gl_get_float(Enum) template<> struct get<Enum>{ \
		static GLfloat value() {													\
			GLfloat res;															\
			glGetFloatv(static_cast<GLenum>(Enum), &res);	\
			return res;															\
		}}

	__gl_get_float(GetParam::DEPTH_CLEAR_VALUE);
	__gl_get_float(GetParam::LINE_WIDTH);

#undef __gl_get_float

#define __gl_get_float_array(Enum, size) template<> struct get<Enum>{ \
		static std::array<GLfloat, size> value() {													\
			std::array<GLfloat, size> res;															\
			glGetFloatv(static_cast<GLenum>(Enum), res.data());	\
			return res;															\
		}}

	__gl_get_float_array(GetParam::ALIASED_LINE_WIDTH_RANGE, 2);
	__gl_get_float_array(GetParam::COLOR_CLEAR_VALUE, 4);
	__gl_get_float_array(GetParam::DEPTH_RANGE, 2);

#undef __gl_get_float_array

#define __gl_get_bool(Enum) template<> struct get<Enum>{ \
		static bool value() {													\
			GLboolean res;															\
			glGetBooleanv(static_cast<GLenum>(Enum), &res);	\
			return res != GL_FALSE;															\
		}}

	__gl_get_bool(GetParam::BLEND);
	__gl_get_bool(GetParam::CULL_FACE);
	__gl_get_bool(GetParam::DEPTH_TEST);
	__gl_get_bool(GetParam::DEPTH_WRITEMASK);
	__gl_get_bool(GetParam::DITHER);

#undef __gl_get_bool

#define __gl_get_bool_array(Enum, size) template<> struct get<Enum>{ \
		static std::array<bool, size> value() {													\
			std::array<bool, size> res;															\
			std::array<GLboolean, size> tmp;															\
			glGetBooleanv(static_cast<GLenum>(Enum), tmp.data());	\
			std::transform(tmp.begin(), tmp.end(), res.begin(), [](GLboolean v){return v != GL_FALSE;});\
			return res;															\
		}}

	__gl_get_bool_array(GetParam::COLOR_WRITEMASK, 4);

#undef __gl_get_bool_array
}
